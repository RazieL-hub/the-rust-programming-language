fn main() {
    let mut s1 = String::from("hello");
    s1.push_str(", world!");
    println!("{}", s1);
    let s2 = s1.clone();
    println!("s1 is {}, s2 is {}", s1, s2);

    let r1 = &s; // нет проблем
    let r2 = &s; // нет проблем
    let r3 = &mut s; // БОЛЬШАЯ ПРОБЛЕМА
}


fn dangle() -> &String { // dangle возвращает ссылку на String
    let s = String::from("hello"); // s — это новый экземпляр типа String
    &s // мы возвращаем ссылку на String, s
    } // Здесь s выход

fn no_dangle() -> String {
    let s = String::from("hello");
    s // Решение заключается в том, чтобы вернуть экземпляр типа String напрямую:
}

// В любой момент времени у вас может быть один из двух вариантов, но не оба:
// одна изменяемая ссылка либо любое число неизменяемых ссылок.
// Ссылки всегда должны быть действительными.

fn first_word(s: &String) -> usize {
    let bytes = s.as_bytes();
    for (i, &item) in bytes.iter().enumerate() {
         if item == b' ' {
            return i;
        }
    }
    s.len()
    }

fn first_word(s: &String) -> &str {
    let bytes = s.as_bytes();
    for (i, &item) in bytes.iter().enumerate() {
    if item == b' ' {
    return &s[0..i];
    }
    }
    &s[..]
    }
    /*
    Идеи владения, заимствования и срезов обеспечивают безопасность доступа к памяти
в программах на Rust во время компиляции. Язык Rust позволяет контролировать
использование памяти таким же образом, как и другие языки системного
программирования. Однако наличие владельца данных автоматически очищает
эти данные, когда владелец выходит из области видимости, подразумевая, что не
нужно писать и отлаживать лишний код с целью получения этого контроля.
     */